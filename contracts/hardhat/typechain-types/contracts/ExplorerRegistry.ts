/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ExplorerRegistry {
  export type AddressLabelStruct = {
    label: string;
    category: string;
    description: string;
    isVerified: boolean;
    submitter: AddressLike;
    timestamp: BigNumberish;
  };

  export type AddressLabelStructOutput = [
    label: string,
    category: string,
    description: string,
    isVerified: boolean,
    submitter: string,
    timestamp: bigint
  ] & {
    label: string;
    category: string;
    description: string;
    isVerified: boolean;
    submitter: string;
    timestamp: bigint;
  };

  export type ContractInfoStruct = {
    name: string;
    version: string;
    sourceCode: string;
    abi: string;
    deployer: AddressLike;
    deploymentBlock: BigNumberish;
    isVerified: boolean;
    isProxy: boolean;
    implementation: AddressLike;
    tags: string[];
  };

  export type ContractInfoStructOutput = [
    name: string,
    version: string,
    sourceCode: string,
    abi: string,
    deployer: string,
    deploymentBlock: bigint,
    isVerified: boolean,
    isProxy: boolean,
    implementation: string,
    tags: string[]
  ] & {
    name: string;
    version: string;
    sourceCode: string;
    abi: string;
    deployer: string;
    deploymentBlock: bigint;
    isVerified: boolean;
    isProxy: boolean;
    implementation: string;
    tags: string[];
  };
}

export interface ExplorerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePlugin"
      | "addAddressLabel"
      | "addVerifier"
      | "addressLabels"
      | "allPluginIds"
      | "contracts"
      | "deactivatePlugin"
      | "getAddressLabel"
      | "getAllPluginIds"
      | "getContractInfo"
      | "getLabeledAddressesCount"
      | "getUserInstalledPlugins"
      | "getVerifiedContractsCount"
      | "installPlugin"
      | "isPluginInstalledByUser"
      | "labelSubmissionFee"
      | "labeledAddresses"
      | "owner"
      | "pause"
      | "paused"
      | "plugins"
      | "registerPlugin"
      | "removeVerifier"
      | "renounceOwnership"
      | "setLabelSubmissionFee"
      | "setVerificationFee"
      | "transferOwnership"
      | "uninstallPlugin"
      | "unpause"
      | "userInstalledPlugins"
      | "verificationFee"
      | "verifiedContracts"
      | "verifiers"
      | "verifyContract"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractUpdated"
      | "ContractVerified"
      | "LabelAdded"
      | "LabelUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PluginInstalled"
      | "PluginRegistered"
      | "PluginUninstalled"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activatePlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressLabel",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressLabels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allPluginIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressLabel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPluginIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLabeledAddressesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInstalledPlugins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "installPlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPluginInstalledByUser",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "labelSubmissionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "labeledAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "plugins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerPlugin",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLabelSubmissionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallPlugin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userInstalledPlugins",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyContract",
    values: [
      AddressLike,
      string,
      string,
      string,
      string,
      boolean,
      AddressLike,
      string[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activatePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressLabels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPluginIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPluginIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLabeledAddressesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInstalledPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPluginInstalledByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "labelSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "labeledAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plugins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLabelSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInstalledPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ContractUpdatedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    name: string,
    version: string
  ];
  export type OutputTuple = [
    contractAddress: string,
    name: string,
    version: string
  ];
  export interface OutputObject {
    contractAddress: string;
    name: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractVerifiedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    name: string,
    version: string
  ];
  export type OutputTuple = [
    contractAddress: string,
    name: string,
    version: string
  ];
  export interface OutputObject {
    contractAddress: string;
    name: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LabelAddedEvent {
  export type InputTuple = [
    targetAddress: AddressLike,
    label: string,
    category: string
  ];
  export type OutputTuple = [
    targetAddress: string,
    label: string,
    category: string
  ];
  export interface OutputObject {
    targetAddress: string;
    label: string;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LabelUpdatedEvent {
  export type InputTuple = [
    targetAddress: AddressLike,
    label: string,
    category: string
  ];
  export type OutputTuple = [
    targetAddress: string,
    label: string,
    category: string
  ];
  export interface OutputObject {
    targetAddress: string;
    label: string;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginInstalledEvent {
  export type InputTuple = [pluginId: string, user: AddressLike];
  export type OutputTuple = [pluginId: string, user: string];
  export interface OutputObject {
    pluginId: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginRegisteredEvent {
  export type InputTuple = [
    pluginId: string,
    name: string,
    developer: AddressLike
  ];
  export type OutputTuple = [pluginId: string, name: string, developer: string];
  export interface OutputObject {
    pluginId: string;
    name: string;
    developer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginUninstalledEvent {
  export type InputTuple = [pluginId: string, user: AddressLike];
  export type OutputTuple = [pluginId: string, user: string];
  export interface OutputObject {
    pluginId: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExplorerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ExplorerRegistry;
  waitForDeployment(): Promise<this>;

  interface: ExplorerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePlugin: TypedContractMethod<[pluginId: string], [void], "nonpayable">;

  addAddressLabel: TypedContractMethod<
    [
      targetAddress: AddressLike,
      label: string,
      category: string,
      description: string
    ],
    [void],
    "payable"
  >;

  addVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  addressLabels: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean, string, bigint] & {
        label: string;
        category: string;
        description: string;
        isVerified: boolean;
        submitter: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  allPluginIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  contracts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        name: string;
        version: string;
        sourceCode: string;
        abi: string;
        deployer: string;
        deploymentBlock: bigint;
        isVerified: boolean;
        isProxy: boolean;
        implementation: string;
      }
    ],
    "view"
  >;

  deactivatePlugin: TypedContractMethod<
    [pluginId: string],
    [void],
    "nonpayable"
  >;

  getAddressLabel: TypedContractMethod<
    [targetAddress: AddressLike],
    [ExplorerRegistry.AddressLabelStructOutput],
    "view"
  >;

  getAllPluginIds: TypedContractMethod<[], [string[]], "view">;

  getContractInfo: TypedContractMethod<
    [contractAddress: AddressLike],
    [ExplorerRegistry.ContractInfoStructOutput],
    "view"
  >;

  getLabeledAddressesCount: TypedContractMethod<[], [bigint], "view">;

  getUserInstalledPlugins: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getVerifiedContractsCount: TypedContractMethod<[], [bigint], "view">;

  installPlugin: TypedContractMethod<[pluginId: string], [void], "nonpayable">;

  isPluginInstalledByUser: TypedContractMethod<
    [pluginId: string, user: AddressLike],
    [boolean],
    "view"
  >;

  labelSubmissionFee: TypedContractMethod<[], [bigint], "view">;

  labeledAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  plugins: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        name: string;
        version: string;
        ipfsHash: string;
        developer: string;
        isActive: boolean;
        installCount: bigint;
      }
    ],
    "view"
  >;

  registerPlugin: TypedContractMethod<
    [pluginId: string, name: string, version: string, ipfsHash: string],
    [void],
    "nonpayable"
  >;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setLabelSubmissionFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerificationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uninstallPlugin: TypedContractMethod<
    [pluginId: string],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userInstalledPlugins: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verificationFee: TypedContractMethod<[], [bigint], "view">;

  verifiedContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  verifiers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verifyContract: TypedContractMethod<
    [
      contractAddress: AddressLike,
      name: string,
      version: string,
      sourceCode: string,
      abi: string,
      isProxy: boolean,
      implementation: AddressLike,
      tags: string[]
    ],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePlugin"
  ): TypedContractMethod<[pluginId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAddressLabel"
  ): TypedContractMethod<
    [
      targetAddress: AddressLike,
      label: string,
      category: string,
      description: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressLabels"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean, string, bigint] & {
        label: string;
        category: string;
        description: string;
        isVerified: boolean;
        submitter: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allPluginIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        name: string;
        version: string;
        sourceCode: string;
        abi: string;
        deployer: string;
        deploymentBlock: bigint;
        isVerified: boolean;
        isProxy: boolean;
        implementation: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivatePlugin"
  ): TypedContractMethod<[pluginId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAddressLabel"
  ): TypedContractMethod<
    [targetAddress: AddressLike],
    [ExplorerRegistry.AddressLabelStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllPluginIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractInfo"
  ): TypedContractMethod<
    [contractAddress: AddressLike],
    [ExplorerRegistry.ContractInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLabeledAddressesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInstalledPlugins"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerifiedContractsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "installPlugin"
  ): TypedContractMethod<[pluginId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPluginInstalledByUser"
  ): TypedContractMethod<
    [pluginId: string, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "labelSubmissionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "labeledAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "plugins"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        name: string;
        version: string;
        ipfsHash: string;
        developer: string;
        isActive: boolean;
        installCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlugin"
  ): TypedContractMethod<
    [pluginId: string, name: string, version: string, ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLabelSubmissionFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uninstallPlugin"
  ): TypedContractMethod<[pluginId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInstalledPlugins"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifiedContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyContract"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      name: string,
      version: string,
      sourceCode: string,
      abi: string,
      isProxy: boolean,
      implementation: AddressLike,
      tags: string[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContractUpdated"
  ): TypedContractEvent<
    ContractUpdatedEvent.InputTuple,
    ContractUpdatedEvent.OutputTuple,
    ContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractVerified"
  ): TypedContractEvent<
    ContractVerifiedEvent.InputTuple,
    ContractVerifiedEvent.OutputTuple,
    ContractVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "LabelAdded"
  ): TypedContractEvent<
    LabelAddedEvent.InputTuple,
    LabelAddedEvent.OutputTuple,
    LabelAddedEvent.OutputObject
  >;
  getEvent(
    key: "LabelUpdated"
  ): TypedContractEvent<
    LabelUpdatedEvent.InputTuple,
    LabelUpdatedEvent.OutputTuple,
    LabelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PluginInstalled"
  ): TypedContractEvent<
    PluginInstalledEvent.InputTuple,
    PluginInstalledEvent.OutputTuple,
    PluginInstalledEvent.OutputObject
  >;
  getEvent(
    key: "PluginRegistered"
  ): TypedContractEvent<
    PluginRegisteredEvent.InputTuple,
    PluginRegisteredEvent.OutputTuple,
    PluginRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PluginUninstalled"
  ): TypedContractEvent<
    PluginUninstalledEvent.InputTuple,
    PluginUninstalledEvent.OutputTuple,
    PluginUninstalledEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContractUpdated(address,string,string)": TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;
    ContractUpdated: TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;

    "ContractVerified(address,string,string)": TypedContractEvent<
      ContractVerifiedEvent.InputTuple,
      ContractVerifiedEvent.OutputTuple,
      ContractVerifiedEvent.OutputObject
    >;
    ContractVerified: TypedContractEvent<
      ContractVerifiedEvent.InputTuple,
      ContractVerifiedEvent.OutputTuple,
      ContractVerifiedEvent.OutputObject
    >;

    "LabelAdded(address,string,string)": TypedContractEvent<
      LabelAddedEvent.InputTuple,
      LabelAddedEvent.OutputTuple,
      LabelAddedEvent.OutputObject
    >;
    LabelAdded: TypedContractEvent<
      LabelAddedEvent.InputTuple,
      LabelAddedEvent.OutputTuple,
      LabelAddedEvent.OutputObject
    >;

    "LabelUpdated(address,string,string)": TypedContractEvent<
      LabelUpdatedEvent.InputTuple,
      LabelUpdatedEvent.OutputTuple,
      LabelUpdatedEvent.OutputObject
    >;
    LabelUpdated: TypedContractEvent<
      LabelUpdatedEvent.InputTuple,
      LabelUpdatedEvent.OutputTuple,
      LabelUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PluginInstalled(string,address)": TypedContractEvent<
      PluginInstalledEvent.InputTuple,
      PluginInstalledEvent.OutputTuple,
      PluginInstalledEvent.OutputObject
    >;
    PluginInstalled: TypedContractEvent<
      PluginInstalledEvent.InputTuple,
      PluginInstalledEvent.OutputTuple,
      PluginInstalledEvent.OutputObject
    >;

    "PluginRegistered(string,string,address)": TypedContractEvent<
      PluginRegisteredEvent.InputTuple,
      PluginRegisteredEvent.OutputTuple,
      PluginRegisteredEvent.OutputObject
    >;
    PluginRegistered: TypedContractEvent<
      PluginRegisteredEvent.InputTuple,
      PluginRegisteredEvent.OutputTuple,
      PluginRegisteredEvent.OutputObject
    >;

    "PluginUninstalled(string,address)": TypedContractEvent<
      PluginUninstalledEvent.InputTuple,
      PluginUninstalledEvent.OutputTuple,
      PluginUninstalledEvent.OutputObject
    >;
    PluginUninstalled: TypedContractEvent<
      PluginUninstalledEvent.InputTuple,
      PluginUninstalledEvent.OutputTuple,
      PluginUninstalledEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
